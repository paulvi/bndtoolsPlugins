/*
 * WARNING
 *
 * This file is maintained automatically by Bndtools.
 * You should not edit it.
 *
 * See the BUILDING-GRADLE.md document in the root project for more details.
 *
 * Build template for bnd projects.
 */

import aQute.bnd.build.Container
import aQute.bnd.osgi.Constants


assert(project != rootProject                         )
assert(rootProject.hasProperty("bndBuildDependencies"))


/* Setup the build dependencies */
buildscript {
  dependencies {
    classpath rootProject.bndBuildDependencies
  }
}




/*
 * Helper Methods
 */

/*
 * Get a property from the project's flattened bnd properties.
 * Returns an empty string when the property is not set unless instructed to
 * throw an exception when the property is not set.
 */
String bnd(String key, boolean throwOnNotSet) {
  assert(project != null                       )
  assert(key != null && !key.isEmpty()         )
  assert(hasProperty("bndFlattenedProperties"))

  def value = bndFlattenedProperties.getProperty(key, null)
  if (value == null) {
    if (throwOnNotSet) {
      throw new GradleException("Bnd property \"$key\" not found in project $project.name")
    }
    value = ""
  }
  return value.trim()
}


/*
 * Determine which files will be included in the bundles of a project.
 */
FileTree getBundleInputFiles() {
  assert(project != null                )
  assert(hasProperty("bndProject"      ))
  assert(hasProperty("bndSrcDir"       ))
  assert(hasProperty("bndSrcBinDir"    ))
  assert(hasProperty("bndTestSrcDir"   ))
  assert(hasProperty("bndTestSrcBinDir"))
  assert(hasProperty("bndTargetDir"    ))

  def tree = fileTree(projectDir)
                    .exclude("$bndSrcDir/**"       )
                    .exclude("$bndSrcBinDir/**"    )
                    .exclude("$bndTestSrcDir/**"   )
                    .exclude("$bndTestSrcBinDir/**")
                    .exclude("$bndTargetDir/**"    )

  def includedResources = fileTree(projectDir).include("$bndSrcBinDir/**")
  bndProject.subBuilders.each { subBuilder ->
    tree.each { f ->
      if (!includedResources.contains(f) && subBuilder.isInScope([f])) {
        includedResources.include(relativePath(f))
      }
    }
  }

  return includedResources
}


/*
 * Determine which files are generated by the bundle task of a project.
 */
FileTree getBundleOutputFiles() {
  assert(project != null            )
  assert(hasProperty("bndProject"  ))
  assert(hasProperty("bndTargetDir"))

  def bundleOutputs = fileTree(projectDir).include("$bndTargetDir/" + Constants.BUILDFILES)

  bndProject.subBuilders.each { subBuilder ->
    bundleOutputs.include(relativePath(bndProject.getOutputFile(subBuilder.bsn)))
  }

  return bundleOutputs
}


/*
 * Convert a bnd (class)path to a gradle file collection.
 */
List<File> bndPathToFileList(Collection<Container> path) {
  def files = new LinkedList<File>()
  if (path != null) {
    path.each {
      if (!files.contains(it.file)) {
        files.add(it.file)
      }
    }
  }

  return files
}




/*
 * Bnd Project
 */

assert(rootProject.hasProperty("bndCnf"                         ))
assert(            hasProperty("bndProject"                     ))
assert(            hasProperty("gradleBuildCompileDeprecation"  ))
assert(            hasProperty("gradleBuildCompileFork"         ))
assert(            hasProperty("gradleBuildCompileVerbose"      ))
assert(            hasProperty("gradleBuildExportDir"           ))
assert(            hasProperty("gradleBuildTestEnableAssertions"))
assert(            hasProperty("gradleBuildTestIgnoreFailures"  ))
assert(            hasProperty("gradleBuildTestMaxParallelForks"))


/* Declare that we're in the offline build */
bndProject.setProperty("in.ant"       , "true"  )
bndProject.setProperty("environment"  , "gradle")

/* Prepare the project */
bndProject.setDelayRunDependencies(true)
bndProject.prepare()
if (!bndProject.isValid()) {
  checkErrors()
  throw new GradleException("Project $project is not a valid bnd project")
}

/* Flatten/Resolve all bnd project properties */
ext.bndFlattenedProperties          = bndProject.getFlattenedProperties(false)

/* Source and output directory settings */
ext.bndSrcDir                       = relativePath(bndProject.src               )
ext.bndSrcBinDir                    = relativePath(bndProject.srcOutput         )
ext.bndTestSrcDir                   = relativePath(bndProject.testSrc           )
ext.bndTestSrcBinDir                = relativePath(bndProject.testOutput        )
ext.bndTargetDir                    = relativePath(bndProject.targetDir         )
ext.bndExportDir                    = "$bndTargetDir/$gradleBuildExportDir"

/* Classpaths */
ext.bndClassPath                    = bndPathToFileList(bndProject.buildpath    )
ext.bndClassPathBoot                = bndPathToFileList(bndProject.bootclasspath)
ext.bndClassPathTest                = bndPathToFileList(bndProject.testpath     )
ext.bndClassPathRun                 = bndPathToFileList(bndProject.runpath      )

/* Java compiler options */
ext.bndDebug                        = parseBoolean(bnd("javac.debug" , false))
ext.bndJava                         =              bnd("java"        , true )
ext.bndJavac                        =              bnd("javac"       , true )
ext.bndJavacSource                  =              bnd("javac.source", true )
ext.bndJavacTarget                  =              bnd("javac.target", true )

/* Other settings */
ext.bndVerbose                      = parseBoolean(bnd(Constants.VERBOSE    , false))
ext.bndReleaseRepo                  =              bnd(Constants.RELEASEREPO, false)

/* File trees */
ext.bndRunFiles                     = fileTree(projectDir).include("*.bndrun")

/* Task skipping instructions */
ext.bndNoJunit1                     = parseBoolean(bnd(Constants.NOJUNIT    , false))
ext.bndNoJunit2                     = parseBoolean(bnd("no.junit"           , false))
ext.bndNoJunitOsgi                  = parseBoolean(bnd(Constants.NOJUNITOSGI, false))
ext.bndTestCases                    =              bnd(Constants.TESTCASES  , false)
ext.bndNoBundles                    = bndProject.isNoBundles()

/* Task skipping booleans */
ext.bndDoBundle                     = !bndNoBundles
ext.bndDoRelease                    = !bndReleaseRepo.isEmpty()
ext.bndDoJUnitTests                 = !(bndNoJunit1    || bndNoJunit2)
ext.bndDoBundleTests                = !(bndNoJunitOsgi || bndTestCases.isEmpty())
ext.bndDoExport                     = !bndRunFiles.isEmpty()


/* A bnd project is a java project */
apply plugin: "java"

/* Setup the bnd project layout */
apply from: rootProject.file("$rootProject.bndCnf/gradle/template/bndLayout.gradle")


/* Setup java compiler classpaths */
dependencies.add("compile"    , files(bndClassPath    ))
dependencies.add("testCompile", files(bndClassPathTest))

if (!bndClassPathBoot.isEmpty()) {
  def classPathBootAsPath = files(bndClassPathBoot).asPath
  compileJava.options.compilerArgs          += ["-Xbootclasspath/p:$classPathBootAsPath"]
  compileTestJava.options.compilerArgs      += ["-Xbootclasspath/p:$classPathBootAsPath"]
  ext.gradleBuildCompileFork                 = true
}

/* Setup java compiler options */
sourceCompatibility                  = bndJavacSource
if (bndJavacTarget ==~ "^\\d+\\.\\d+\$") {
  targetCompatibility                = bndJavacTarget
} else {
  compileJava.options.compilerArgs          += ["-target", bndJavacTarget]
}
compileJava.options.debug                    = bndDebug
compileJava.options.listFiles                = bndVerbose
compileJava.options.verbose                  = gradleBuildCompileVerbose
compileJava.options.fork                     = gradleBuildCompileFork || (bndJavac != "javac")
compileJava.options.deprecation              = gradleBuildCompileDeprecation
compileJava.options.forkOptions.setExecutable(bndJavac)

compileTestJava.options.debug                = bndDebug
compileTestJava.options.listFiles            = bndVerbose
compileTestJava.options.verbose              = gradleBuildCompileVerbose
compileTestJava.options.fork                 = gradleBuildCompileFork || (bndJavac != "javac")
compileTestJava.options.deprecation          = gradleBuildCompileDeprecation
compileTestJava.options.forkOptions.setExecutable(bndJavac)

/* Setup test options */
test.enableAssertions                        = gradleBuildTestEnableAssertions
test.ignoreFailures                          = gradleBuildTestIgnoreFailures
test.maxParallelForks                        = gradleBuildTestMaxParallelForks

/* Override the javadoc bootclasspath */
ext.gradleBuildJavadocClassPathBoot = bndClassPathBoot

/*
 * Setup tasks
 */

/* Add tasks that are relevant to Java projects */
apply from: rootProject.file("$rootProject.bndCnf/gradle/template/javaProject.gradle")

clean.doLast {
  bndProject.clean()
}

task bundle {
  description   "Assembles OSGi bundle(s)."
  group         "Build"
  dependsOn     classes
  enabled       bndDoBundle

  if (enabled) {
    inputs.files  { getBundleInputFiles()  }
    outputs.files { getBundleOutputFiles() }

    doLast {
      def targetDir = file(bndTargetDir)
      if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
        throw new GradleException("Could not create directory $targetDir")
      }
      try {
        bndProject.build()
      } catch (Exception e) {
        throw new GradleException("Building OSGi bundle(s) of project $project.name failed", e)
      }
      checkErrors()
    }
  }
}

task release {
  description   "Release OSGi bundle(s) into the release repository."
  group         "Release"
  dependsOn     bundle
  enabled       bndDoRelease

  if (enabled) {
    inputs.files  { bndProject.deliverables.collect { it.file } }

    doLast {
      try {
        bndProject.release(bndReleaseRepo, false)
      } catch (Exception e) {
        throw new GradleException("Releasing OSGi bundle(s) of project $project.name failed", e)
      }
      checkErrors()
    }
  }
}

task releaseNeeded {
  description   "Release OSGi bundle(s) and those of all projects this project depends on."
  group         "Release"
  dependsOn     release
}


tasks.addRule('Pattern: export.<name>: Export the <name>.bndrun file to a runnable jar.') { taskName ->
  if (taskName.startsWith('export.')) {
    def bndrun = taskName - 'export.'
    task(taskName) {
      description   "Export the ${bndrun}.bndrun file to a runnable jar."
      group         "Export"
      dependsOn     bundle
      def runFile = relativePath("${bndrun}.bndrun")
      def jarFile = "${bndrun}.jar"
      doLast {
        def exportDir = file(bndExportDir)
        if ((!exportDir.exists() && !exportDir.mkdirs()) || !exportDir.isDirectory()) {
          throw new GradleException("Could not create directory $exportDir")
        }
        try {
          bndProject.export(runFile, false, file("$bndExportDir/$jarFile"))
        } catch (Exception e) {
          throw new GradleException("Exporting $runFile of project $project.name failed", e)
        }
        checkErrors()
      }
    }
  }
}


task export {
  description   "Export bndrun files to runnable jars."
  group         "Export"
  dependsOn     bundle
  enabled       bndDoExport

  if (enabled) {
    inputs.files  { bndRunFiles + getBundleOutputFiles()                }
    outputs.files { fileTree(projectDir).include("$bndExportDir/*.jar") }

    bndRunFiles.each {
      dependsOn tasks.getByPath("export.${it.name - '.bndrun'}")
    }
  }
}


task bundleTest {
  description   "Run OSGi tests."
  group         "Verification"
  enabled       bndDoBundleTests
  dependsOn     bundle

  if (enabled) {
    inputs.files  { getBundleOutputFiles() }

    doLast {
      try {
        bndProject.test()
      } catch (Exception e) {
        throw new GradleException("Running OSGi tests in project $project.name failed", e)
      }
      checkErrors()
    }
  }
}

task bndproperties {
  description "Display bnd properties."
  group       "Help"

  doLast {
    println()
    println '------------------------------------------------------------'
    println "Project ${project.name}"
    println '------------------------------------------------------------'
    println()
    bndProject.getPropertyKeys(true).sort({
      s1, s2 -> s1.compareTo(s2)
    }).each {
      println "${it}: ${bnd(it, false)}"
    }
  }
}


/*
 * Setup task dependencies
 */

jar.dependsOn(bundle)
jar.enabled = false

test.dependsOn(bundle)
test.enabled = bndDoJUnitTests

check.dependsOn(bundleTest)

bndProject.dependson.each {
  compileJava.dependsOn  (":${it.name}:bundle")
  releaseNeeded.dependsOn(":${it.name}:releaseNeeded")
}


/*
 * Print bnd project warnings and errors and exit when errors are not allowed.
 */
private void checkErrors() {
  bndProject.getInfo(bndProject.workspace, "${bndProject.workspace.base.name} :")
  def int errorCount = 0
  bndProject.warnings.each {
    project.logger.warn "Warning: ${it}"
  }

  bndProject.errors.each {
    project.logger.error "Error  : ${it}"
    errorCount++
  }

  if (!bndProject.isOk()) {
    def str = 'even though no errors were reported'
    if (errorCount == 1) {
      str = 'one error was reported'
    } else if (errorCount > 1) {
      str = "${errorCount} errors were reported"
    }
    throw new GradleException("Project ${bndProject.name} is invalid, ${str}")
  }

  bndProject.warnings.clear()
  bndProject.errors.clear()
}

/*
 * Parse a boolean the same way bnd parses it.
 */
private boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}


/* Load the build customisations */
apply from: rootProject.file("$rootProject.bndCnf/gradle/custom/bndProjects.gradle")
