/*
 * WARNING
 *
 * This file should not be edited.
 *
 * Determine the build dependencies.
 */

assert(hasProperty('bnd_cnf'))


void getBuildDependencies(Set<File> buildDependencies, Set<String> evaluatedDependencies) {
  assert(buildDependencies != null               )
  assert(evaluatedDependencies != null           )

  def propKeyExtensionRegex = '\\.url\$'
  properties
     .findAll({it -> it.key.trim().toLowerCase() ==~ ('.+' + propKeyExtensionRegex)})
     .each {
    def propKey        = it.key.trim()
    def propValue      = it.value.trim()
    def dependencyName = propKey.toLowerCase().replaceFirst(propKeyExtensionRegex, '')
    if (!propValue.empty) {
      if (evaluatedDependencies.contains(dependencyName)) {
        println "Warning: Build dependency ${dependencyName} was already processed, skipping ${propKey}"
      } else {
        def url = null
        try {
          url = new URL(propValue)
        } catch (MalformedURLException e) {
          throw new GradleException("Build dependency ${propKey} specifies an invalid URL", e)
        }

        def dependencyFile = null
        if (url.protocol.toLowerCase().equals('file')) {
          def urlPath = url.path
          dependencyFile     = new File(urlPath)
          if (!dependencyFile.absolute) {
            dependencyFile   = new File(rootDir, urlPath)
          }
        } else {
          def urlBaseName    = new File(url.path).name
          dependencyFile     = new File(rootDir, "${bnd_cnf}/cache/${urlBaseName}")
          /* Download from the URL when needed */
          if (!dependencyFile.exists()) {
            println "Downloading build dependency ${dependencyName} from ${url}"
            def downloadDir = dependencyFile.parentFile
            if ((!downloadDir.exists() && !downloadDir.mkdirs()) || !downloadDir.isDirectory()) {
              throw new GradleException("Could not create directory ${downloadDir}")
            }
            try {
              url.withInputStream{ is -> dependencyFile.withOutputStream{ it << is }}
            } catch (Exception e) {
              throw new GradleException("Downloading build dependency ${dependencyName} from ${url} failed", e)
            }
          }
        }

        assert(dependencyFile != null)

        if (!dependencyFile.exists()) {
          throw new GradleException("Build dependency ${dependencyName} (${dependencyFile.absolutePath}) does not exist.")
        }

        buildDependencies.add(dependencyFile)
        evaluatedDependencies.add(dependencyName)
      }
    }
  }
}

/* Determine build dependencies */
def buildDependencies     = new HashSet<File>();
def evaluatedDependencies = new HashSet<String>()
getBuildDependencies(buildDependencies, evaluatedDependencies)

/* After the rootProject is created, set up some properties. */
gradle.rootProject { rootProject ->
 rootProject.ext.bndBuildDependencies = files(buildDependencies)
}
