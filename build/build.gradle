import org.apache.tools.ant.filters.ReplaceTokens


assert(hasProperty("bndProject"  ))
assert(hasProperty("bndTargetDir"))


/* Eclipse settings for p2 publishing */
ext.bndEclipseDirectory         = "$projectDir/eclipse-3.5.2"
ext.bndEclipseJar               = files("$bndEclipseDirectory/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar")
ext.bndEclipseJarMain           = "org.eclipse.equinox.launcher.Main"
ext.bndEclipseAntRunner         = "org.eclipse.ant.core.antRunner"
ext.bndEclipseCategoryPublisher = "org.eclipse.equinox.p2.publisher.CategoryPublisher"


/*
 * Helper Methods
 */

/*
 * Get a property from the project's flattened bnd properties.
 * Returns an empty string when the property is not set unless instructed to
 * throw an exception when the property is not set.
 */
String getBndProjectProperty(String key, boolean throwOnNotSet) {
  assert(project != null                       )
  assert(key != null && !key.isEmpty()         )
  assert(hasProperty("bndFlattenedProperties"))

  def value = bndFlattenedProperties.getProperty(key, null)
  if (value == null) {
    if (throwOnNotSet) {
      throw new GradleException("Bnd property \"$key\" not found in project $project.name")
    }
    value = ""
  }
  return value.trim()
}

/*
 * Copy the bundle outputs of the specified projects into a directory
 */
void copyProjectBundles(List<String> projs, String dstDir) {
  projs.each {
    def proj = rootProject.findProject(it)
    if (proj == null) {
      throw new GradleException("Could not find project " + it)
    }

    proj.bndProject.subBuilders.each { subBuilder ->
      def targetDir = file(dstDir)
      if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
        throw new GradleException("Could not create directory $targetDir")
      }
      copy {
        from project.relativePath(proj.bndProject.getOutputFile(subBuilder.bsn))
        into targetDir
      }
    }
  }
}

/*
 * Generate a p2 repository.
 */
void generateP2Repository(String title, String antTarget, String metadataRepository, String categoryDefinition) {
  assert(hasProperty("bndEclipseJar"              ))
  assert(hasProperty("bndEclipseJarMain"          ))
  assert(hasProperty("bndEclipseAntRunner"        ))
  assert(hasProperty("bndEclipseCategoryPublisher"))
  assert(hasProperty("bndTargetDir"               ))

  def javaArgs  = []
  if (bndVerbose) {
    javaArgs   += "-consoleLog"
  }
  javaArgs     += "-application"
  javaArgs     += bndEclipseAntRunner
  javaArgs     += "-data"
  javaArgs     += "$projectDir/$bndTargetDir"
  javaArgs     += "-buildfile"
  javaArgs     += "p2.xml"
  javaArgs     += "-Dp2SubDir=$p2SubDir"
  javaArgs     += antTarget

  def result = javaexec {
    classpath      = bndEclipseJar
    main           = bndEclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not publish features and bundles - $title")
  }

  javaArgs  = []
  if (bndVerbose) {
    javaArgs   += "-consoleLog"
  }
  javaArgs     += "-application"
  javaArgs     += bndEclipseCategoryPublisher
  javaArgs     += "-data"
  javaArgs     += "$projectDir/$bndTargetDir"
  javaArgs     += "-metadataRepository"
  javaArgs     += "file:$projectDir/$bndTargetDir/$metadataRepository"
  javaArgs     += "-categoryDefinition"
  javaArgs     += "file:$projectDir/$bndTargetDir/$categoryDefinition"
  javaArgs     += "-compress"

  result = javaexec {
    classpath      = bndEclipseJar
    main           = bndEclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not categorise repository - $title")
  }

  /* Clean up the files Eclipse leaves behind */
  fileTree("$bndEclipseDirectory").include("configuration/*.log").each {
    it.delete()
  }

  delete(file("$bndEclipseDirectory/configuration/org.eclipse.core.runtime"))
  delete(file("$bndEclipseDirectory/configuration/org.eclipse.equinox.app" ))
  delete(file("$bndEclipseDirectory/configuration/org.eclipse.osgi"        ))
  delete(file("$bndEclipseDirectory/p2"                                    ))
}


/*
 * Setup tasks (p2 entry)
 */

task p2Entry {
}


/*
 * Setup tasks (p2 features)
 */

ext.p2Timestamp   = "" + System.currentTimeMillis()
ext.gitShaShort   = getBndProjectProperty("Git-SHA", true).replaceAll("([0-9a-fA-F]{7}).*", "\$1")
ext.masterVersion = String.format("%s.%s-%s-g%s",
                       getBndProjectProperty("base-version", true),
                       getBndProjectProperty("base-version-qualifier", true),
                       new Date().format('yyyyMMdd-HHmmss').toString(),
                       gitShaShort)


task p2FeaturesTree(type: Copy) {
  from    "feature"
  into    "$bndTargetDir/features"
  filter(ReplaceTokens, tokens: ["master-version" : masterVersion, "p2PelagicUpdateSiteUrl" : p2PelagicUpdateSiteUrl])
  include "**/category.xml"
  include "**/feature.xml"
}

task p2FeatureGradlePlugin(type: Zip) {
  destinationDir = file("$bndTargetDir/features/pelagic")
  archiveName    = "nl.pelagic.bndtools.headless.build.plugin.gradle.feature.jar"
  from             "$bndTargetDir/features/pelagic/gradle"
  include          "feature.xml"
}

task p2Features {
}


/*
 * Setup tasks (p2 plugins)
 */

task p2PluginsPelagic() {
  doLast {
    copyProjectBundles(p2_pelagic, "$bndTargetDir/plugins/pelagic")
  }
}

task p2Plugins {
  doLast {
    delete("$bndTargetDir/tmp");
  }
}


/*
 * Setup tasks (p2 repositories)
 */

task p2 {
  description "Generate the p2 repositories."
  group       "Distribution"

  inputs.files { fileTree(projectDir)
                   .include("p2.xml")
                   .include("$bndTargetDir/p2/$p2SubDir/**")
                   .include("$bndTargetDir/features/pelagic/category.xml")
               }

  doLast {
    generateP2Repository("Bndtools Plugins by Pelagic", "p2Pelagic", "p2/$p2SubDir", "features/pelagic/category.xml")
    delete("$bndTargetDir/features")
    delete("$bndTargetDir/plugins")
  }
}


/*
 * Setup tasks (distribution)
 */

task distCompositePelagic(type: Copy) {
  from    "feature/pelagic"
  into    "$bndTargetDir/p2"
  filter(ReplaceTokens, tokens: [
             "p2Timestamp" : p2Timestamp,
             "p2BndtoolsdateSiteUrl" : p2BndtoolsdateSiteUrl,
             "p2SubDir" : p2SubDir])
  include "compositeContent.xml"
  include "compositeArtifacts.xml"
}

task distZipPelagic(type: Zip) {
  destinationDir = file(bndTargetDir)
  archiveName    = "pelagic-bndtools-plugins-latest.zip"
  from             "$bndTargetDir/p2"
  include          "**"
}

task dist {
  description "Create distribution archives containing p2 repositories (including R5 indexes)."
  group       "Distribution"
}


/*
 * Setup task dependencies
 */

bundle.enabled                       = false
release.enabled                      = false


/* depend on all bnd projects in the workspace */
rootProject.subprojects.each {
  if (it.hasProperty("bndProject")) {
    p2Entry.dependsOn += [":" + it.name + ":bundle"]
  }
}

p2FeaturesTree.dependsOn            += [p2Entry                       ]
p2FeatureGradlePlugin.dependsOn     += [p2FeaturesTree                ]
p2Features.dependsOn                += [p2FeatureGradlePlugin         ]

p2PluginsPelagic.dependsOn          += [p2Entry                       ]
p2Plugins.dependsOn                 += [p2PluginsPelagic              ]

p2.dependsOn                        += [p2Features,    p2Plugins      ]

index.dependsOn                     += [p2]

distCompositePelagic.dependsOn      += [index                         ]
distZipPelagic.dependsOn            += [index, distCompositePelagic   ]
dist.dependsOn                      += [distZipPelagic                ]
