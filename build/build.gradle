/*
 * GNU LIBRARY GENERAL PUBLIC LICENSE
 * Version 2, June 1991
 */

import org.apache.tools.ant.filters.ReplaceTokens


assert(hasProperty("bndProject"))


/* Eclipse settings for p2 publishing */
ext.bndEclipseDirectory           = "${projectDir}/eclipse-3.5.2"
ext.bndEclipseJar                 = files("${bndEclipseDirectory}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar")
ext.bndEclipseJarMain             = 'org.eclipse.equinox.launcher.Main'
ext.bndEclipseAntRunner           = 'org.eclipse.ant.core.antRunner'
ext.bndEclipseCategoryPublisher   = 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
ext.bndP2LandingDirectory         = "${projectDir}/p2Landing"
ext.bndP2LandingPagesJar          = files("${bndP2LandingDirectory}/sapphire-releng-tools.jar")
ext.bndP2LandingPagesMainListings = 'org.eclipse.sapphire.releng.listing.GenFolderListingOp'
ext.bndP2LandingPagesMain2Landing = 'org.eclipse.sapphire.releng.landing.GenRepositoryLandingOp'


String bndThrow(String name) {
  def value = project.bnd.get(name)
  if (value == null) {
    throw new GradleException("Bnd property \"${name}\" not found in project ${project.name}")
  }
  return value
}

/* Copy the bundle outputs of the specified projects into a directory */
void copyProjectBundles(List<String> projs, String dstDir) {
  def targetDir = file(dstDir)
  if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
    throw new GradleException("Could not create directory ${targetDir}")
  }

  projs.each {
    def proj = rootProject.findProject(it)
    if (proj == null) {
      throw new GradleException("Could not find project ${it}")
    }

    if (!proj.hasProperty('bndProject')) {
      throw new GradleException("Project ${it} is not a bnd project")
    }

    proj.bndProject.getDeliverables().each { deliverable ->
      copy {
        from project.relativePath(deliverable.file)
        into targetDir
      }
    }
  }
}

/* Generate a p2 repository */
void generateP2Repository(String title, String antTarget, String metadataRepository, String categoryDefinition) {
  def verbose = logger.isEnabled(LogLevel.DEBUG)

  def javaArgs  = []
  if (verbose) {
    javaArgs   += '-consoleLog'
  }
  javaArgs     += ['-application', bndEclipseAntRunner,
                   '-data'       , "${projectDir}/${p2TargetDir}",
                   '-buildfile'  , 'p2.xml',
                   "-Dp2SubDir=${p2SubDir}",
                   antTarget]

  def result = javaexec {
    classpath   = bndEclipseJar
    main        = bndEclipseJarMain
    args        = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not publish features and bundles - ${title}")
  }

  javaArgs  = []
  if (verbose) {
    javaArgs   += '-consoleLog'
  }
  javaArgs     += ['-application'       , bndEclipseCategoryPublisher,
                   '-data'              , "${projectDir}/${p2TargetDir}",
                   '-metadataRepository', "file:${projectDir}/${p2TargetDir}/${metadataRepository}",
                   '-categoryDefinition', "file:${projectDir}/${p2TargetDir}/${categoryDefinition}",
                   '-compress']

  result = javaexec {
    classpath   = bndEclipseJar
    main        = bndEclipseJarMain
    args        = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not categorise repository - ${title}")
  }

  /* Clean up the files Eclipse leaves behind */
  fileTree("${bndEclipseDirectory}").include("configuration/*.log").each {
    it.delete()
  }

  delete(file("${bndEclipseDirectory}/configuration/org.eclipse.core.runtime"))
  delete(file("${bndEclipseDirectory}/configuration/org.eclipse.equinox.app" ))
  delete(file("${bndEclipseDirectory}/configuration/org.eclipse.osgi"        ))
  delete(file("${bndEclipseDirectory}/p2"                                    ))
}


/* Generate p2 landing pages */
void generateP2LandingPages(String title) {
  def javaArgs  = ["${p2TargetDir}/p2"]
  def result = javaexec {
    classpath   = bndP2LandingPagesJar
    main        = bndP2LandingPagesMainListings
    args        = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not create p2 listings")
  }

  javaArgs      = ["${p2TargetDir}/p2", "${title}"]
  result = javaexec {
    classpath   = bndP2LandingPagesJar
    main        = bndP2LandingPagesMain2Landing
    args        = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not create p2 landing page")
  }
}


/*
 * Setup tasks (p2 entry)
 */

task p2Entry {
}


/*
 * Setup tasks (p2 features)
 */

ext.p2Timestamp   = '' + System.currentTimeMillis()
ext.gitShaShort   = bndThrow('Git-SHA').replaceAll('([0-9a-fA-F]{7}).*', '\$1')
ext.masterVersion = String.format('%s.%s-%s-g%s',
                       bndThrow('base-version'),
                       bndThrow('base-version-qualifier'),
                       new Date().format('yyyyMMdd-HHmmss').toString(),
                       gitShaShort)


task p2FeaturesTree(type: Copy) {
  dependsOn p2Entry
  from             'feature'
  into             "${p2TargetDir}/features"
  filter(ReplaceTokens, tokens: [
                   'master-version'         : masterVersion,
                   'p2PelagicUpdateSiteUrl' : p2PelagicUpdateSiteUrl])
  include          "**/category.xml"
  include          "**/feature.xml"
}

task p2FeatureGradlePlugin(type: Zip) {
  dependsOn        p2FeaturesTree
  destinationDir = file("${p2TargetDir}/features/pelagic")
  archiveName    = 'nl.pelagic.bndtools.headless.build.plugin.gradle.feature.jar'
  from             "${p2TargetDir}/features/pelagic/gradle"
  include          'feature.xml'
}

task p2Features {
  dependsOn        p2FeatureGradlePlugin
}


/*
 * Setup tasks (p2 plugins)
 */

task p2PluginsPelagic() {
  dependsOn        p2Entry
  doLast {
    copyProjectBundles(p2_pelagic, "${p2TargetDir}/plugins/pelagic")
  }
}

task p2Plugins {
  dependsOn        p2PluginsPelagic
  doLast {
    delete("${p2TargetDir}/tmp");
  }
}


/*
 * Setup tasks (p2 repositories)
 */

task p2 {
  dependsOn        p2Features, p2Plugins
  description      'Generate the p2 repositories.'
  group            'distribution'

  inputs.files     fileTree(projectDir)
                     .include('p2.xml')
                     .include("${p2TargetDir}/p2/${p2SubDir}/**")
                     .include("${p2TargetDir}/features/pelagic/category.xml")

  doLast {
    generateP2Repository("${ProjectTitle}", 'p2Pelagic', "p2/${p2SubDir}", 'features/pelagic/category.xml')
    delete("${p2TargetDir}/features")
    delete("${p2TargetDir}/plugins")
  }
}


/*
 * Setup tasks (p2 landing pages)
 */

task p2Landing {
  dependsOn        p2
  description      'Generate the p2 landing pages.'
  group            'distribution'

  inputs.files     fileTree("${p2TargetDir}/p2").include('**')

  doLast {
    generateP2LandingPages("${ProjectTitle}")
  }
}


/*
 * Setup tasks (indexing)
 */

index.dependsOn(p2)


/*
 * Setup tasks (distribution)
 */

task distCompositePelagic(type: Copy) {
  dependsOn        index
  from             'feature/pelagic'
  into             "${p2TargetDir}/p2"
  filter(ReplaceTokens, tokens: [
                   'p2Timestamp'           : p2Timestamp,
                   'p2BndtoolsdateSiteUrl' : p2BndtoolsdateSiteUrl,
                   'p2SubDir'              : p2SubDir])
  include          'compositeContent.xml'
  include          'compositeArtifacts.xml'
}

task distZipPelagic(type: Zip) {
  dependsOn        p2Landing, distCompositePelagic
  destinationDir = file(p2TargetDir)
  archiveName    = 'pelagic-bndtools-plugins-latest.zip'
  from             "${p2TargetDir}/p2"
  include          '**'
}

task dist {
  dependsOn        distZipPelagic
  description      'Create distribution archives containing p2 repositories (including R5 indexes).'
  group            'distribution'
}


/* depend on all bnd projects in the workspace */
rootProject.subprojects.each {
  if (it.hasProperty('bndProject')) {
    p2Entry.dependsOn += [":${it.name}:jar"]
  }
}
